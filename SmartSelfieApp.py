# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Smart Selfie App.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2
import datetime
import os
import winsound
import time
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QFileDialog, QApplication, QMainWindow, QLabel
from PyQt5.uic import loadUi
from scipy.interpolate import UnivariateSpline

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frameVideo = QtWidgets.QFrame(self.centralwidget)
        self.frameVideo.setGeometry(QtCore.QRect(80, 100, 480, 480))
        self.frameVideo.setLocale(
            QtCore.QLocale(QtCore.QLocale.Indonesian, QtCore.QLocale.Indonesia)
        )
        self.frameVideo.setFrameShape(QtWidgets.QFrame.Box)
        self.frameVideo.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameVideo.setLineWidth(1)
        self.frameVideo.setMidLineWidth(1)
        self.frameVideo.setObjectName("frameVideo")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(0, 10, 1281, 81))
        font = QtGui.QFont()
        font.setPointSize(28)
        font.setBold(True)
        self.title.setFont(font)
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("title")
        self.chooseFolderBtn = QtWidgets.QPushButton(self.centralwidget)
        self.chooseFolderBtn.setGeometry(QtCore.QRect(900, 100, 118, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.chooseFolderBtn.setFont(font)
        self.chooseFolderBtn.setObjectName("chooseFolderBtn")
        self.cbSharpen = QtWidgets.QCheckBox(self.centralwidget)
        self.cbSharpen.setGeometry(QtCore.QRect(620, 200, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbSharpen.setFont(font)
        self.cbSharpen.setIconSize(QtCore.QSize(24, 24))
        self.cbSharpen.setObjectName("cbSharpen")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(620, 170, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.cbContrast = QtWidgets.QCheckBox(self.centralwidget)
        self.cbContrast.setGeometry(QtCore.QRect(620, 240, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbContrast.setFont(font)
        self.cbContrast.setIconSize(QtCore.QSize(24, 24))
        self.cbContrast.setObjectName("cbContrast")
        self.cbBrightness = QtWidgets.QCheckBox(self.centralwidget)
        self.cbBrightness.setGeometry(QtCore.QRect(620, 280, 120, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbBrightness.setFont(font)
        self.cbBrightness.setIconSize(QtCore.QSize(24, 24))
        self.cbBrightness.setObjectName("cbBrightness")
        self.cbSephia = QtWidgets.QCheckBox(self.centralwidget)
        self.cbSephia.setGeometry(QtCore.QRect(620, 320, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbSephia.setFont(font)
        self.cbSephia.setIconSize(QtCore.QSize(24, 24))
        self.cbSephia.setObjectName("cbSephia")
        self.cbPencilSketch = QtWidgets.QCheckBox(self.centralwidget)
        self.cbPencilSketch.setGeometry(QtCore.QRect(620, 360, 141, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbPencilSketch.setFont(font)
        self.cbPencilSketch.setIconSize(QtCore.QSize(24, 24))
        self.cbPencilSketch.setObjectName("cbPencilSketch")
        self.cbHDR = QtWidgets.QCheckBox(self.centralwidget)
        self.cbHDR.setGeometry(QtCore.QRect(990, 200, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbHDR.setFont(font)
        self.cbHDR.setIconSize(QtCore.QSize(24, 24))
        self.cbHDR.setObjectName("cbHDR")
        self.cbInvert = QtWidgets.QCheckBox(self.centralwidget)
        self.cbInvert.setGeometry(QtCore.QRect(990, 240, 110, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbInvert.setFont(font)
        self.cbInvert.setIconSize(QtCore.QSize(24, 24))
        self.cbInvert.setObjectName("cbInvert")
        self.cbSummerFX = QtWidgets.QCheckBox(self.centralwidget)
        self.cbSummerFX.setGeometry(QtCore.QRect(990, 280, 150, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbSummerFX.setFont(font)
        self.cbSummerFX.setIconSize(QtCore.QSize(24, 24))
        self.cbSummerFX.setObjectName("cbSummerFX")
        self.cbWinterFX = QtWidgets.QCheckBox(self.centralwidget)
        self.cbWinterFX.setGeometry(QtCore.QRect(990, 320, 150, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbWinterFX.setFont(font)
        self.cbWinterFX.setIconSize(QtCore.QSize(24, 24))
        self.cbWinterFX.setObjectName("cbWinterFX")
        self.cbGrayscale = QtWidgets.QCheckBox(self.centralwidget)
        self.cbGrayscale.setGeometry(QtCore.QRect(990, 360, 120, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.cbGrayscale.setFont(font)
        self.cbGrayscale.setIconSize(QtCore.QSize(24, 24))
        self.cbGrayscale.setObjectName("cbGrayscale")
        self.folderPathInput = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.folderPathInput.setGeometry(QtCore.QRect(620, 100, 280, 38))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.folderPathInput.setFont(font)
        self.folderPathInput.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.folderPathInput.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.folderPathInput.setLineWrapMode(QtWidgets.QPlainTextEdit.NoWrap)
        self.folderPathInput.setObjectName("folderPathInput")

        app_path = os.path.dirname(os.path.abspath(__file__))
        self.folderPathInput.setPlainText(f"{app_path}\my_photos\\")

        self.sliderContrast = QtWidgets.QSlider(self.centralwidget)
        self.sliderContrast.setGeometry(QtCore.QRect(770, 240, 160, 18))
        self.sliderContrast.setMaximum(100)
        self.sliderContrast.setValue(100)
        self.sliderContrast.setOrientation(QtCore.Qt.Horizontal)
        self.sliderContrast.setObjectName("sliderContrast")
        self.inputContrast = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.inputContrast.setGeometry(QtCore.QRect(940, 235, 24, 24))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.inputContrast.setFont(font)
        self.inputContrast.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.inputContrast.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.inputContrast.setLineWrapMode(QtWidgets.QPlainTextEdit.NoWrap)
        self.inputContrast.setObjectName("inputContrast")
        self.sliderBrightness = QtWidgets.QSlider(self.centralwidget)
        self.sliderBrightness.setGeometry(QtCore.QRect(770, 280, 160, 18))
        self.sliderBrightness.setMaximum(100)
        self.sliderBrightness.setValue(100)
        self.sliderBrightness.setOrientation(QtCore.Qt.Horizontal)
        self.sliderBrightness.setObjectName("sliderBrightness")
        self.inputBrightness = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.inputBrightness.setGeometry(QtCore.QRect(940, 275, 24, 24))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.inputBrightness.setFont(font)
        self.inputBrightness.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.inputBrightness.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.inputBrightness.setLineWrapMode(QtWidgets.QPlainTextEdit.NoWrap)
        self.inputBrightness.setObjectName("inputBrightness")
        self.startBtn = QtWidgets.QPushButton(self.centralwidget)
        self.startBtn.setGeometry(QtCore.QRect(260, 600, 118, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.startBtn.setFont(font)
        self.startBtn.setObjectName("startBtn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_Folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_Folder.setObjectName("actionOpen_Folder")
        self.menuFile.addAction(self.actionOpen_Folder)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.title.setText(_translate("MainWindow", "Smart Selfie App"))
        self.chooseFolderBtn.setText(_translate("MainWindow", "Pilih Folder"))
        self.cbSharpen.setText(_translate("MainWindow", "Sharpen"))
        self.label.setText(_translate("MainWindow", "Pilih Filter"))
        self.cbContrast.setText(_translate("MainWindow", "Contrast"))
        self.cbBrightness.setText(_translate("MainWindow", "Brightness"))
        self.cbSephia.setText(_translate("MainWindow", "Sephia"))
        self.cbPencilSketch.setText(_translate("MainWindow", "Pencil Sketch"))
        self.cbHDR.setText(_translate("MainWindow", "HDR"))
        self.cbInvert.setText(_translate("MainWindow", "Invert"))
        self.cbSummerFX.setText(_translate("MainWindow", "Summer Effect"))
        self.cbWinterFX.setText(_translate("MainWindow", "Winter Effect"))
        self.cbGrayscale.setText(_translate("MainWindow", "Grayscale"))
        self.startBtn.setText(_translate("MainWindow", "Mulai"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen_Folder.setText(_translate("MainWindow", "Open Folder..."))


class MyMainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyMainWindow, self).__init__(parent)
        self.setupUi(self)

        self.chooseFolderBtn.clicked.connect(self.on_choose_folder_clicked)

        # Inisialisasi video capture
        self.video_capture = cv2.VideoCapture(0)

        # Timer untuk mengupdate tampilan video
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(30)

        # Buat QLabel untuk menampilkan video
        self.video_label = QLabel(self.frameVideo)
        self.video_label.setGeometry(
            QtCore.QRect(0, 0, self.frameVideo.width(), self.frameVideo.height())
        )
        self.video_label.setAlignment(QtCore.Qt.AlignCenter)

        # Inisialisasi deteksi wajah dan senyum
        self.face_cascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
        self.smile_cascade = cv2.CascadeClassifier("haarcascade_smile.xml")

        # Inisialisasi variabel untuk melacak jumlah foto yang diambil
        self.photo_count = 0

        # Menghubungkan checkbox dengan fungsi filter yang sesuai
        self.cbGrayscale.stateChanged.connect(self.update_frame)
        self.cbSharpen.stateChanged.connect(self.update_frame)
        self.cbContrast.stateChanged.connect(self.update_frame)
        self.cbBrightness.stateChanged.connect(self.update_frame)
        self.cbSephia.stateChanged.connect(self.update_frame)
        self.cbPencilSketch.stateChanged.connect(self.update_frame)
        self.cbHDR.stateChanged.connect(self.update_frame)
        self.cbInvert.stateChanged.connect(self.update_frame)
        self.cbSummerFX.stateChanged.connect(self.update_frame)
        self.cbWinterFX.stateChanged.connect(self.update_frame)

        # Menghubungkan slider untuk filter sharpen, contrast, dan brightness dengan fungsi yang sesuai
        self.sliderContrast.valueChanged.connect(self.update_frame)
        self.sliderBrightness.valueChanged.connect(self.update_frame)

        # Menghubungkan button mulai dengan fungsi yang sesuai
        self.startBtn.clicked.connect(self.on_click_btn_start)

        self.detect_smile = False

    def on_choose_folder_clicked(self):
        folder_path = QFileDialog.getExistingDirectory(self, "Pilih Folder")
        if folder_path:
            self.folderPathInput.setPlainText(folder_path)

    def on_click_btn_start(self):
        if not self.detect_smile:
            self.detect_smile = True
            self.startBtn.setText("Berhenti")
        else:
            self.detect_smile = False
            self.startBtn.setText("Mulai")

    def on_cb_grayscale_checked(self, state):
        self.grayscale_enabled = state == QtCore.Qt.Checked

    def apply_filters_to_image(self, frame):
        # Mengaplikasikan filter-filter yang dipilih
        if self.cbGrayscale.isChecked():
            frame = self.greyscale(frame)

        if self.cbSharpen.isChecked():
            frame = self.sharpen(frame, 9.5)

        if self.cbContrast.isChecked():
            contrast_value = self.sliderContrast.value() / 50.0
            self.inputContrast.setPlainText(str(contrast_value))
            frame = self.contrast(frame, contrast_value)

        if self.cbBrightness.isChecked():
            brightness_value = self.sliderBrightness.value() - 50
            self.inputBrightness.setPlainText(str(brightness_value))
            frame = self.bright(frame, brightness_value)

        if self.cbSephia.isChecked():
            frame = self.sepia(frame)

        if self.cbPencilSketch.isChecked():
            frame = self.pencil_sketch_grey(frame)

        if self.cbHDR.isChecked():
            frame = self.HDR(frame)

        if self.cbInvert.isChecked():
            frame = self.invert(frame)

        if self.cbSummerFX.isChecked():
            frame = self.Summer(frame)

        if self.cbWinterFX.isChecked():
            frame = self.Winter(frame)

        return frame

    def update_frame(self):
        ret, frame = self.video_capture.read()

        if not ret:
            return

        # Salin gambar asli sebelum dimodifikasi
        original_frame = frame.copy()

        # Mengubah format gambar dari BGR ke RGB
        rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Mengaplikasikan filter-filter yang dipilih
        filtered_frame = self.apply_filters_to_image(frame)

        # Deteksi wajah dan senyum
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = self.face_cascade.detectMultiScale(gray, 1.3, 5)

        for x, y, w, h in faces:
            if not self.detect_smile:
                continue

            cv2.rectangle(filtered_frame, (x, y), (x + w, y + h), (0, 255, 255), 2)
            face_roi = frame[y : y + h, x : x + w]
            gray_roi = gray[y : y + h, x : x + w]
            smiles = self.smile_cascade.detectMultiScale(gray_roi, 1.3, 35)

            for x1, y1, w1, h1 in smiles:
                cv2.rectangle(face_roi, (x1, y1), (x1 + w1, y1 + h1), (0, 0, 255), 2)

                # Menampilkan countdown selama 3 detik sebelum mengambil foto
                for i in range(3, 0, -1):
                    frame_with_text = filtered_frame.copy()
                    cv2.putText(
                        frame_with_text,
                        f"Foto dalam {i}",
                        (85, 40),
                        cv2.FONT_HERSHEY_SIMPLEX,
                        1,
                        (0, 255, 0),
                        2,
                        cv2.LINE_AA,
                    )
                    self.display_image(frame_with_text)

                    # Delay 1 detik
                    cv2.waitKey(1000)

                # Mengambil foto
                time_stamp = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
                folder_path = self.folderPathInput.toPlainText()
                os.makedirs(folder_path, exist_ok=True)
                file_name = f"{folder_path}/selfie-{time_stamp}.png"

                # Menerapkan filter pada foto sebelum menyimpan
                filtered_frame = self.apply_filters_to_image(original_frame)

                cv2.imwrite(file_name, filtered_frame)
                self.play_camera_click_sound()

        self.display_image(filtered_frame)

    def display_image(self, image):
        # Mengubah format gambar dari BGR ke RGB
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Mengubah gambar ke format QImage
        image = QImage(
            rgb_image.data,
            rgb_image.shape[1],
            rgb_image.shape[0],
            QImage.Format_RGB888,
        )

        # Menampilkan gambar ke dalam QLabel
        self.video_label.setPixmap(QPixmap.fromImage(image))

    def play_camera_click_sound(self):
        winsound.PlaySound("camera_click.wav", winsound.SND_FILENAME)

    def closeEvent(self, event):
        self.video_capture.release()
        event.accept()

    # Fungsi filter

    def greyscale(self, img):
        greyscale = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        return greyscale

    def bright(self, img, beta_value):
        img_bright = cv2.convertScaleAbs(img, beta=beta_value)
        return img_bright

    # Contrast adjustment
    def contrast(self, img, contrast_value):
        img_contrast = cv2.convertScaleAbs(img, alpha=contrast_value)
        return img_contrast

    def sharpen(self, img, sharpen_value):
        kernel = np.array([[-1, -1, -1], [-1, sharpen_value, -1], [-1, -1, -1]])
        img_sharpen = cv2.filter2D(img, -1, kernel)
        return img_sharpen

    def sepia(self, img):
        img_sepia = np.array(img, dtype=np.float64)
        img_sepia = cv2.transform(
            img_sepia,
            np.matrix(
                [[0.272, 0.534, 0.131], [0.349, 0.686, 0.168], [0.393, 0.769, 0.189]]
            ),
        )
        img_sepia[np.where(img_sepia > 255)] = 255
        img_sepia = np.array(img_sepia, dtype=np.uint8)
        return img_sepia

    def pencil_sketch_grey(self, img):
        sk_gray, _ = cv2.pencilSketch(img, sigma_s=60, sigma_r=0.07, shade_factor=0.1)
        return sk_gray

    def HDR(self, img):
        hdr = cv2.detailEnhance(img, sigma_s=12, sigma_r=0.15)
        return hdr

    def invert(self, img):
        inv = cv2.bitwise_not(img)
        return inv

    def LookupTable(self, x, y):
        spline = UnivariateSpline(x, y)
        return spline(range(256))

    def Summer(self, img):
        increaseLookupTable = self.LookupTable([0, 64, 128, 256], [0, 80, 160, 256])
        decreaseLookupTable = self.LookupTable([0, 64, 128, 256], [0, 50, 100, 256])
        blue_channel, green_channel, red_channel = cv2.split(img)
        red_channel = cv2.LUT(red_channel, increaseLookupTable).astype(np.uint8)
        blue_channel = cv2.LUT(blue_channel, decreaseLookupTable).astype(np.uint8)
        sum_img = cv2.merge((blue_channel, green_channel, red_channel))
        return sum_img

    def Winter(self, img):
        increaseLookupTable = self.LookupTable([0, 64, 128, 256], [0, 80, 160, 256])
        decreaseLookupTable = self.LookupTable([0, 64, 128, 256], [0, 50, 100, 256])
        blue_channel, green_channel, red_channel = cv2.split(img)
        red_channel = cv2.LUT(red_channel, decreaseLookupTable).astype(np.uint8)
        blue_channel = cv2.LUT(blue_channel, increaseLookupTable).astype(np.uint8)
        win_img = cv2.merge((blue_channel, green_channel, red_channel))
        return win_img

    def apply_filters(self, frame):
        # Mengaplikasikan filter-filter yang dipilih
        if self.cbGrayscale.isChecked():
            frame = self.greyscale(frame)

        if self.cbSharpen.isChecked():
            frame = self.sharpen(frame, 9.5)

        if self.cbContrast.isChecked():
            contrast_value = self.sliderContrast.value() / 50.0
            frame = self.contrast(frame, contrast_value)

        if self.cbBrightness.isChecked():
            brightness_value = self.sliderBrightness.value() - 50
            frame = self.bright(frame, brightness_value)

        if self.cbSephia.isChecked():
            frame = self.sepia(frame)

        if self.cbPencilSketch.isChecked():
            if self.cbGrayscale.isChecked():
                frame = self.pencil_sketch_grey(frame)
            else:
                frame = self.pencil_sketch_col(frame)

        if self.cbHDR.isChecked():
            frame = self.HDR(frame)

        if self.cbInvert.isChecked():
            frame = self.invert(frame)

        if self.cbSummerFX.isChecked():
            frame = self.Summer(frame)

        if self.cbWinterFX.isChecked():
            frame = self.Winter(frame)


if __name__ == "__main__":
    import sys

    app = QApplication([])
    ui = MyMainWindow()
    ui.show()
    app.exec_()
